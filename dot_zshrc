# vim: filetype=zsh
# why above?: https://www.chezmoi.io/user-guide/frequently-asked-questions/design/#do-i-have-to-use-chezmoi-edit-to-edit-my-dotfiles

# zmodload zsh/zprof

# set -v

export ZSH_COMPDUMP="$HOME/.cache/.zcompdump-$HOST"
autoload -U +X compinit
compinit -i -d "$ZSH_COMPDUMP"


# LOCALE
if [[ -f /etc/centos-release ]]; then
    if grep -q "CentOS Linux release 7" /etc/centos-release; then
        export LANG=en_US.UTF-8
    fi
fi

# Function to add to PATH only if not already present
add_to_path() {
    case ":$PATH:" in
        *":$1:"*) ;;
        *) export PATH="$1:$PATH" ;;
    esac
}

# PATH
add_to_path "$HOME/bin"
add_to_path "/usr/local/bin"
add_to_path "$HOME/.mybin"

# rust
add_to_path "$HOME/.local/bin"

export MANPATH="/usr/local/man:$MANPATH"
export MANWIDTH=999

##  go
# export PATH=$PATH:/usr/local/go/bin
# export PATH=$PATH:$HOME/go/bin

export MAKEFLAGS="-j$(( $(nproc) + 1 ))"
# export LESS='-iRFSX'

# Check if the OS is CentOS 7 and source the devtoolset-8 script
if [[ -f /etc/centos-release ]]; then
    if grep -q "CentOS Linux release 7" /etc/centos-release; then
        # source /opt/rh/devtoolset-8/enable
        alias enable-gcc-toolset='source /opt/rh/devtoolset-8/enable'
    fi
fi

# Check if the system is Rocky Linux
if grep -q "Rocky Linux" /etc/os-release; then
    alias enable-gcc-toolset='scl enable gcc-toolset-13 zsh'
fi

# ccache
# Check if 'ccache' exists and if '/usr/lib/ccache' directory exists
if command -v ccache > /dev/null 2>&1 && [ -d "/usr/lib/ccache/bin" ];then
    # arch linux
    #add_to_path "/usr/lib/ccache/bin"
elif command -v ccache >/dev/null 2>&1 && [ -d "/usr/lib/ccache" ]; then
    # ubuntu
    #add_to_path "/usr/lib/ccache"
fi
export CCACHE_MAXSIZE=10Gi


# Check if the OS is Arch Linux
if [[ -f /etc/os-release && $(grep -oP '(?<=^ID=).+' /etc/os-release) == "arch" ]]; then
    # export CC=gcc-13
    # export CXX=g++-13

    if command -v kime &>/dev/null; then
        export GTK_IM_MODULE=kime
        export QT_IM_MODULE=kime
        export XMODIFIERS=@im=kime
    elif command -v fcitx5 >/dev/null 2>&1; then
        export GTK_IM_MODULE=fcitx
        export QT_IM_MODULE=fcitx
        export XMODIFIERS=@im=fcitx
    fi
fi



# Preferred editor for local and remote sessions
if command -v nvim >/dev/null 2>&1; then
    export EDITOR="nvim"
    export ZVM_VI_EDITOR="nvim"
fi


# nix
if ! command -v nix > /dev/null 2>&1; then
    if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then . $HOME/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
fi
## https://nixos.wiki/wiki/Locales
## if not set, lazygit on ubuntu will complain about locale
export LOCALE_ARCHIVE=/usr/lib/locale/locale-archive

alias my-nix-install='my-nix-install.sh'

my-utils-install() {
    npm install xcv --global
}

# zellij
if ! command -v zellij > /dev/null 2>&1; then
    echo "warning: zellij not installed"
else
    # workaround for zellij completion
    # https://github.com/zellij-org/zellij/issues/1933#issuecomment-2274464004
    . <( zellij setup --generate-completion zsh | sed -Ee 's/^(_(zellij) ).*/compdef \1\2/' )
fi

zellij_new_if_cannot_attach() {
    if [ -n "$TERM_PROGRAM" ] && [ "$TERM_PROGRAM" = "WezTerm" ]; then
        zellij attach -c my-wezterm

    elif [ -n "$WT_SESSION" ]; then
        zellij attach -c my-winterm

    elif [[ "$ALACRITTY_ENV" == "true" ]]; then
        zellij attach -c my-alacritty

    elif [[ -n "$ALACRITTY_LOG" ]]; then
        zellij attach -c my-alacritty

    elif [ -n "$KITTY_PID" ]; then
        zellij attach -c my-kitty

    else
        zellij a || zellij
    fi
}

alias zl='zellij_new_if_cannot_attach'
alias zell='zellij'
alias za='$MY_SCRIPTS/zellij/attach-or-new.sh'
alias zf='$MY_SCRIPTS/zellij/attach-or-new.sh'
alias zs='zellij -s'
alias zn='zellij -s'

# Auto-run zellij if not on SSH, VS Code, Docker, etc.
zellij_autorun() {
    if [ -n "$SSH_CONNECTION" ]; then
        return
    fi

    if [ "$TERM_PROGRAM" = "vscode" ]; then
        echo "Inside VS Code. zellij not used."
        return
    fi

    if grep -q docker /proc/1/cgroup; then
        echo "Inside a Docker container. zellij not used."
        return
    fi

    if ! command -v zellij &>/dev/null; then
        echo "zellij is not installed. Please install zellij to use this feature."
        return
    fi

    if [ -z "$ZELLIJ" ]; then
        echo "Loading zellij..."
        zellij_new_if_cannot_attach
    fi
}

zellij_tab_name_update() {
    if [[ -n $ZELLIJ ]]; then
        local current_dir=$PWD
        if [[ $current_dir == $HOME ]]; then
            current_dir="~"
        else
            current_dir=${current_dir##*/}
        fi

        # Make the length of dirname exactly 8
        local max_length=8
        if [[ ${#current_dir} -gt $max_length ]]; then
            current_dir="${current_dir:0:$((max_length-1))}~"
        else
            current_dir=$(printf "%-8s" "${current_dir}")
        fi

        nohup zellij action rename-tab "$current_dir" >/dev/null 2>&1
        # setopt LOCAL_OPTIONS NO_NOTIFY NO_MONITOR
        # { sleep 0.3 && zellij action rename-tab "$current_dir" > /dev/null 2>&1 } & disown
        # nohup zellij action rename-tab "$current_dir" > /dev/null 2>&1
    fi
}

# zellij_tab_name_update
chpwd_functions+=(zellij_tab_name_update)


# ohmyzsh
# sh -c "$(curl -fsSL https://install.ohmyz.sh/)"
if [ ! -d "$HOME/.cache/omz" ]; then
    mkdir -p "$HOME/.cache/omz"
fi
export ZSH="$HOME/.oh-my-zsh"
export DIRSTACKSIZE=100
plugins=(dirpersist gitfast gh rust)
source $ZSH/oh-my-zsh.sh

zellij_autorun

export CHEZ_EDITOR='chezmoi edit --watch'

clip() {
    if grep -qi microsoft /proc/version; then
        clip.exe "$@"
    else
        xclip -selection clipboard "$@"
    fi
}

# fzf
# https://github.com/junegunn/fzf
# git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
# ~/.fzf/install
if !command -v fzf >/dev/null 2>&1; then
    echo "warning: fzf not installed."
fi
if [ -f ~/.config/fzf-git/fzf-git.sh ]; then
    source "$HOME/.config/fzf-git/fzf-git.sh"
else
    echo "Warning: $HOME/.config/fzf-git/fzf-git.sh not found!"
fi


## zoxide
# export _ZO_FZF_OPTS='--exact --no-sort --bind=ctrl-z:ignore,btab:up,tab:down --cycle --keep-right --height=60% --info=inline --layout=reverse --tabstop=1 --exit-0 --no-border'
eval "$(zoxide init zsh)"


## starship
eval "$(starship init zsh)"


# direnv
eval "$(direnv hook zsh)"



# In order to use grc (generic colorizer), change forgit alias.
# This must come before eval sheldon.
export forgit_revert_commit='grcm'

# sheldon
# https://github.com/rossmacarthur/sheldon
# curl --proto '=https' -fLsS https://rossmacarthur.github.io/install/crate.sh \
    # | bash -s -- --repo rossmacarthur/sheldon --to ~/.local/bin
eval "$(sheldon source)"
source <(sheldon completions --shell zsh)
if ! command -v sheldon > /dev/null 2>&1; then
    echo "warning: sheldon not installed."
fi

# forgit, installed by sheldon
# required to copy hash to clipboard using forgit
export FORGIT_COPY_CMD='xclip -selection clipboard'
# after `forgit` was loaded.
# must be after plugin manager, such as sheldon
export PATH="$PATH:$FORGIT_INSTALL_DIR/bin"
# required for delta to make it show diff in full width
export COLUMNS
export FZF_PREVIEW_COLUMNS
export FORGIT_PAGER='delta --side-by-side -w ${FZF_PREVIEW_COLUMNS:-$COLUMNS}'
# git forgit log --all shows graph edges the wrong way
# https://github.com/wfxr/forgit/issues/71#issuecomment-627997261
export FORGIT_LOG_FZF_OPTS='--reverse'
export FORGIT_FZF_DEFAULT_OPTS="
--exact
--border
--cycle
--reverse
--height '80%'
"


# zsh-autosuggest
bindkey '^ ' autosuggest-accept


# # zsh-autocomplete, installed by sheldon
# bindkey '^I' menu-select
# bindkey "$terminfo[kcbt]" menu-select
# bindkey -M menuselect '^I' menu-complete
# bindkey -M menuselect "$terminfo[kcbt]" reverse-menu-complete
# # Enable recent file sorting in completions
# zstyle ':completion:*' file-sort modification
# zstyle ':completion:*' group-name ''
# zstyle ':completion:*' menu select


# atuin
# must be below sheldon, due to conflict with autocomplete
# https://docs.atuin.sh/guide/basic-usage
# curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh
#. "$HOME/.atuin/bin/env"
eval "$(atuin init zsh)"
if ! command -v atuin > /dev/null 2>&1; then
    echo "warning: atuin not installed."
fi


# mise
eval "$(mise activate zsh)"


# source <(chezmoi completion zsh)


export NIXBIN="$HOME/.nix-profile/bin"


# source $HOME/.config/zsh/mdbook.zsh


if command -v kubectl &> /dev/null; then
    source <(kubectl completion zsh)
fi


# gh cli
if ! command -v gh > /dev/null 2>&1; then
    echo "warning: gh cli not installed."
    echo "use 'sudo apt install gh' or 'sudo pacman -S gh'"
    echo "use 'gh extension install dlvhdr/gh-dash'"
fi


# zsh personal aliases
# must be below export PATHs, since it checks whether each command exists.
export MY_SCRIPTS="$HOME/.config/my-scripts"
add_to_path "$MY_SCRIPTS/bin"

source "$MY_SCRIPTS/zsh/aliases.zsh"
alias zalias="$CHEZ_EDITOR $MY_SCRIPTS/zsh/aliases.zsh"
alias zali='zalias'

if ! command -v diffnav > /dev/null 2>&1; then
  echo "warning: diffnav not installed."
fi

if command -v grc &> /dev/null; then
    source $MY_SCRIPTS/grc.zsh
fi

if ! command -v broot > /dev/null 2>&1; then
  echo "warning: broot not installed."
else
  function br {
    local cmd cmd_file code
    cmd_file=$(mktemp)
    if broot --outcmd "$cmd_file" "$@"; then
        cmd=$(<"$cmd_file")
        command rm -f "$cmd_file"
        eval "$cmd"
    else
          code=$?
        command rm -f "$cmd_file"
        return "$code"
    fi
  }

  alias B='br -g -d -s --sort-by-date --tree --sort-by-type-dirs-last'
fi


# krew
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"


if [ "$PWD" = "$HOME" ] && [ -z "$ZELLIJ" ]; then
    $MY_SCRIPTS/bin/fastfetch.zsh
    gita ll

    echo "ZELLIJ:"
    echo "$(zellij ls)"

    if [ -n "$SSH_CONNECTION" ]; then
    # Check if sshd service is active
        if pgrep -x sshd > /dev/null; then
            if [ -f /var/log/btmp ]; then
                echo "SSH: Recent failed login attempts:"
                # List recent login attempts
                sudo lastb -a | head -n 10
            else
                echo "SSH: No failed login attempts found."
            fi
        else
            echo "SSH: sshd service is not running."
        fi
    fi
else
    ll
fi

# if $HOME/.config/fzf-scripts does not exist, clone it
if [[ ! -d "$HOME/.config/fzf-scripts" ]]; then
    git clone https://github.com/DanielFGray/fzf-scripts "$HOME/.config/fzf-scripts"
fi
add_to_path "$HOME/.config/fzf-scripts"

# Check if DuckDB directory exists before adding to PATH
if [ -d "/home/vimkim/.duckdb/cli/latest" ]; then
    export PATH="/home/vimkim/.duckdb/cli/latest:$PATH"
else
    echo "Warning: DuckDB directory '/home/vimkim/.duckdb/cli/latest' does not exist"
fi

# zprof
